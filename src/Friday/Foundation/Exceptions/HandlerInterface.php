<?php
/**
 * IronPHP : PHP Development Framework
 * Copyright (c) IronPHP (https://github.com/IronPHP/IronPHP).
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) IronPHP (https://github.com/IronPHP/IronPHP)
 *
 * @link
 * @since         1.0.1
 *
 * @license       MIT License (https://opensource.org/licenses/mit-license.php)
 * @auther        GaurangKumar Parmar <gaurangkumarp@gmail.com>
 */

namespace Friday\Foundation\Exceptions;

interface HandlerInterface
{
    const EXCEPTION_HANDLER = 'handleException';
    const ERROR_HANDLER = 'handleError';
    const SHUTDOWN_HANDLER = 'handleShutdown';

    /**
     * Create a new exception handler instance.
     *
     * @param  System|null  system
     *
     * @return void
     */
    public function __construct(System $system = null);

    /**
     * Set PHP internal logging file.
     *
     * @param bool|string $log
     *
     * @return void
     */
    public function logging($log = false);

    /**
     * Registers this instance as an error handler.
     *
     * @return $this
     */
    public function register();

    /**
     * Unregisters all handlers registered by this Whoops\Run instance.
     *
     * @return $this
     */
    public function unregister();

    /**
     * Should Whoops allow Handlers to force the script to quit?
     *
     * @param bool|int $exit
     *
     * @return bool
     */
    public function allowQuit($exit = null);

    /**
     * Handles an exception, ultimately generating a Whoops error
     * page.
     *
     * @param \Throwable $exception
     *
     * @return string Output generated by handlers
     */
    public function handleException($exception);

    /**
     * Converts generic PHP errors to \ErrorException
     * instances, before passing them off to be handled.
     *
     * This method MUST be compatible with set_error_handler.
     *
     * @param int    $level
     * @param string $message
     * @param string $file
     * @param int    $line
     *
     * @throws ErrorException
     *
     * @return bool
     */
    public function handleError($level, $message, $file = null, $line = null);

    /**
     * Special case to deal with Fatal errors and the like.
     */
    public function handleShutdown();
}
